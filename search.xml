<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux基础自查</title>
      <link href="/2023/02/20/linux-1/"/>
      <url>/2023/02/20/linux-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-基础操作命令"><a href="#Linux-基础操作命令" class="headerlink" title="Linux 基础操作命令"></a>Linux 基础操作命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man</span><br><span class="line">用法：man [选项] 命令</span><br><span class="line">作用：查看命令的详细说明手册。</span><br></pre></td></tr></table></figure><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">用法：cd [选项] 目录</span><br><span class="line">作用：切换到某个目录（Change Directory）。</span><br></pre></td></tr></table></figure><p>目录访问 cd &lt;&gt;</p><ul><li>~ 当前用户主目录。对于一般用户，主目录是 /home/用户名，对于 root 用户，主目录则是 /root。</li><li>.. 上一级目录</li><li>. 代表切换到当前所在的目录</li><li>- 上一次访问的目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">用法：ls [选项] [目录]</span><br><span class="line">作用：列出目录中的文件。若参数“目录”未给出，则列出当前目录中的文件。</span><br><span class="line">选项（常用）：</span><br><span class="line">-a              显示隐藏的文件</span><br><span class="line">-l              每行只列出一个文件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir</span><br><span class="line">用法：mkdir [选项] 目录</span><br><span class="line">作用：创建一个新目录。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">用法：pwd [选项]</span><br><span class="line">作用：输出当前目录的绝对路径。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rmdir</span><br><span class="line">用法：rmdir [选项] 目录</span><br><span class="line">作用：删除一个空的目录。请注意，只有空的目录才能被删除。</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch</span><br><span class="line">用法：touch [选项] 文件名</span><br><span class="line">作用：当文件存在时更新文件的时间戳，当文件不存在时创建新文件。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rm</span><br><span class="line">用法：rm [选项] 文件</span><br><span class="line">作用：删除文件。</span><br><span class="line">选项（常用）：</span><br><span class="line">-r              递归删除目录及其内容，删除非空目录必须有此选项，否则无法删除。</span><br><span class="line">-f              强制删除，不提示用户确认，忽略不存在的目录。</span><br><span class="line">-i              逐一提示用户确认每个将要被删除的文件。</span><br><span class="line">Tips：rm -rf 是十分危险的命令（尤其在 root 用户下），非必要不使用 rm -rf 命令，在执行之前需要再三确认。root 用户具有至高无上的权限，在该用户下执行 rm -rf &#x2F; 可以删除一切文件，包括 Linux 本身，从而导致系统被毁灭。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp</span><br><span class="line">用法：cp [选项] 源文件 目标路径</span><br><span class="line">作用：将源文件（也可以是目录）复制为目标路径对应的文件（如果目标路径是文件）或复制到目标路径（如果目标路径是目录）。</span><br><span class="line">选项（常用）：</span><br><span class="line">-r              递归复制目录及其子目录内的所有内容。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv</span><br><span class="line">用法：mv [选项] 源文件 目标路径</span><br><span class="line">作用：将源文件（也可以是目录）移动为目标路径对应的文件（如果目标路径是文件）或移动到目标路径（如果目标路径是目录）。</span><br><span class="line">选项（常用）：</span><br><span class="line">-r              递归移动目录及其子目录内的所有内容。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">diff</span><br><span class="line">用法：diff [选项] 文件1 文件2</span><br><span class="line">选项（常用）：</span><br><span class="line">-b              不检查空白字符的不同。</span><br><span class="line">-B              不检查空行。</span><br><span class="line">-q              仅显示有无差异，不显示详细信息。</span><br></pre></td></tr></table></figure><h2 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find</span><br><span class="line">用法：find [路径] &lt;选项&gt;</span><br><span class="line">作用：在给定路径下递归地查找文件，输出符合要求的文件的路径。如果没有给定路径，则在当前目录下查找。</span><br><span class="line">选项（常用）：</span><br><span class="line">-name &lt;文件名&gt;             指定需要查找的文件名。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grep</span><br><span class="line">用法：grep [选项] PATTERN FILE</span><br><span class="line">（PATTERN是匹配字符串，FILE是文件或目录的路径）</span><br><span class="line">作用：输出匹配PATTERN的文件和相关的行。</span><br><span class="line">选项（常用）：</span><br><span class="line">-a              不忽略二进制数据进行搜索。</span><br><span class="line">-i              忽略大小写差异。</span><br><span class="line">-r              从目录中递归查找。</span><br><span class="line">-n              显示行号。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 是根据文件的属性（文件名、修改日期等）查找文件，而 grep 则是匹配文件内的内容查找文件和文件中的匹配位置。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br><span class="line">用法: tree [选项] [目录名]</span><br><span class="line">作用：输出目录下的文件数</span><br><span class="line">选项(常用)：</span><br><span class="line">-a              列出全部文件（包含隐藏文件）。</span><br><span class="line">-d              只列出目录。</span><br></pre></td></tr></table></figure><h2 id="读取操作"><a href="#读取操作" class="headerlink" title="读取操作"></a>读取操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat 命令将文件内容输出到标准输出</span><br><span class="line">grep 命令支持从标准输入读取文本</span><br><span class="line">grep &quot;xx&quot;</span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>Ctrl+C 终止当前程序的执行。</li><li>Ctrl+Z 挂起当前程序。暂停程序，放到后台。Ctrl+Z 挂起程序后会显示该程序挂起编号，若想要恢复该程序可以使用 fg [job_spec]即可，job_spec 即为挂起编号，不输入时默认为最近挂起进程。</li><li>Ctrl+D 终止输入（若正在使用 Shell，则退出当前 Shell）。在标准输入中输入 Ctrl+D 也意味着输入了一个 EOF。</li><li>Ctrl+L 清屏。相当于命令 clear</li><li>Ctrl+S 在终端中的作用是暂停该终端。有的同学在进行编辑的时候会误触此组合键导致终端“卡死”，此时使用 Ctrl+Q 组合键即可让终端继续运行。</li></ul><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><p><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">《简明 Vim 练级攻略》</a></p><h1 id="GCC-GNU-Compiler-Collection"><a href="#GCC-GNU-Compiler-Collection" class="headerlink" title="GCC(GNU Compiler Collection)"></a>GCC(GNU Compiler Collection)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc</span><br><span class="line">用法：gcc [选项] 源代码文件</span><br><span class="line">作用：编译源代码文件。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;</span><br><span class="line">Tips：.&#x2F; 表示被执行的文件在当前目录，Linux 会在当前目录中查找可执行文件。如果不加 .&#x2F;，那么 Linux 就会在“系统 PATH”中寻找。</span><br></pre></td></tr></table></figure><h1 id="Make-amp-Makefile"><a href="#Make-amp-Makefile" class="headerlink" title="Make &amp; Makefile"></a>Make &amp; Makefile</h1><ul><li><a href="https://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="noopener">阮一峰的网络日志 - Make 命令教程</a>，是 make 工具的初学者教程。</li><li><a href="https://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener">GNU make 手册</a>，列出了 make 的完整功能，可供研究和参考</li></ul><h1 id="Ctags"><a href="#Ctags" class="headerlink" title="Ctags"></a>Ctags</h1><p>ctags 是一个方便代码阅读的工具。利用 ctags，我们可以在 Vim 下进行更便捷的开发。</p><p>执行命令 ctags -R *，就会发现在该目录下出现了新的文件 tags ——这是 ctags 为我们创建的符号名索引文件。此时我们就能使用 ctags 的功能了。</p><p>使用 Vim 打开 .c 文件，将光标移动到 a 或 b 上，按下 Ctrl+]，就可以跳转到结构体中 a 或 b 的定义处。再按下 Ctrl+O 就可以返回跳转前的位置。</p><h1 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h1><p><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html" target="_blank" rel="noopener">Tmux 使用教程</a><br>在 Shell 下直接输入命令 tmux，可以看到终端底部出现一行绿色，这时就已经进入了 tmux 的新会话。tmux 的操作由一系列快捷键组成，下面对重要的快捷键进行介绍。</p><ul><li>Ctrl+B Shift+Num 5（同时按下 Ctrl 和 B，然后松开这两个键，紧接着立刻输入“%”，下面同理），将窗口左右分屏。</li><li>Ctrl+B Shift+’ ，将窗口上下分屏。</li><li>重复以上两个快捷键，可以将目前活动的窗格继续分屏。</li><li>Ctrl+B Up / Down / Left / Right 根据按键方向切换到某个窗格。</li><li>Ctrl+B Space，切换窗格布局（上下变成左右，左右变成上下）。</li><li>Ctrl+B X，关闭当前正在使用的窗格（根据提示按 Y 确认关闭）。</li><li>Ctrl+B D，分离（Detach）当前会话，回到 Shell 的终端环境。此时程序仍然保持在 tmux 会话中的状态。</li><li>当我们使用 Ctrl+B D 分离了会话或者意外断开了连接，我们该如何恢复到之前的会话中呢？我们首先使用 tmux ls 命令查看当前都有哪些会话。记住会话名（会话名是冒号左边的内容，默认情况下是一个数字），使用 tmux a -t 会话名 恢复到原来的会话。</li></ul><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git init 会自动把当前目录变成一个空的 Git 仓库，这样就可以对当前目录下的内容进行版本管理了。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone</span><br><span class="line">git init 创建一个新的储存库，而 git clone &lt;URL&gt; 则是“克隆”一个已有的储存库到当前目录下。通常我们会从一个互联网地址（即 URL，统一资源定位符）进行克隆，所以一般这种操作可以理解为“下载”。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">这个命令可以查看当前分支的状态，以及当前工作区的变动和暂存区的内容，便于我们对工作区的概况进行掌握。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br><span class="line">使用这个命令，可以把一个新文件或者已经修改过的文件加入暂存区中。</span><br><span class="line">在你完成一部分实验内容之后，可以使用 git add . 将你的所有修改加入暂存区，也可以使用 git add &lt;filename&gt; 来将指定的文件加入暂存区。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git restore</span><br><span class="line">我们在修改一个文件之后，可能想要放弃这个修改。</span><br><span class="line">当这个文件还没有通过 git add 加入暂存区时，我们可以使用 git restore &lt;filename&gt; 来撤销对这个文件的修改，使其退回到上一个 commit 的状态。如果这个文件已经加入了暂存区，我们可以通过 git restore --staged &lt;filename&gt; 来取消暂存。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout</span><br><span class="line">这个命令涉及到分支的知识，分支的概念在这里不会详细介绍，感兴趣的同学可以参考 [Pro Git](https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;zh&#x2F;v2)。涉及在各个 Lab 中进行切换。这时，使用 git checkout lab&lt;x&gt; 可以切换到相应的分支。</span><br><span class="line"></span><br><span class="line">请注意，在切换时，需要保证目前所有文件的状态均为“未修改”（没有修改过，或者已经提交）。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line">使用 git commit -m &lt;message&gt; 这个命令将暂存区的修改提交到储存库中。当 message 参数有空格时需要把 message 用引号括起来。在提交时，要求给出一段说明性文字。这段文字可以任意填写，但建议按照提交内容填写，以保证多人协作时的可读性。本实验不会涉及多人协作，所以方便自己开发即可。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line">这个命令将本地的 commit 推送到一个远程仓库。在课程实验中，这个命令可以将你的 commit 推送到 GitLab。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">这个命令将远程新建的分支下载到本地，并且将远端的更改合并到当前的分支。在利用评测机进行实验分支的初始化之后，可以在开发机中使用这个命令来将新的分支下载到本地。</span><br></pre></td></tr></table></figure><h1 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title="Shell 脚本"></a>Shell 脚本</h1><p><a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">Bash 脚本教程</a><br>touch 命令创建的文件默认是没有“执行”权限的，需要手动添加。若发现 Shell 脚本执行时出现了“Permission denied”的错误，多半是因为没有添加“执行”权限。我们可以使用下面的命令手动添加“执行”权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod x &lt;文件名&gt;</span><br></pre></td></tr></table></figure><h1 id="Sed"><a href="#Sed" class="headerlink" title="Sed"></a>Sed</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sed</span><br><span class="line">sed [选项] &#39;命令&#39; 输入文本</span><br><span class="line">选项（常用）：</span><br><span class="line">-n：安静模式，只显示经过sed处理的内容。否则显示输入文本的所有内容。</span><br><span class="line">-i：直接修改读取的档案内容，而不是输出到屏幕。否则，只输出不编辑。</span><br><span class="line">命令（常用）：</span><br><span class="line">&lt;行号&gt;a&lt;内容&gt;： 新增，在行号后新增一行相应内容。行号可以是“数字”，在这一行之后新增，也可以是“起始行，终止行”，在其中的每一行后新增。当不写行号时，在每一行之后新增。使用$表示最后一行。后面的命令同理。</span><br><span class="line">&lt;行号&gt;c&lt;内容&gt;：取代。用内容取代相应行的文本。</span><br><span class="line">&lt;行号&gt;i&lt;内容&gt;：插入。在当前行的上面插入一行文本。</span><br><span class="line">&lt;行号&gt;d：删除当前行的内容。</span><br><span class="line">&lt;行号&gt;p：输出选择的内容。通常与选项-n一起使用。</span><br><span class="line">s&#x2F;&lt;re&gt;&#x2F;&lt;string&gt;：将&lt;re&gt;（正则表达式）匹配的内容替换为&lt;string&gt;。</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-sed.html" target="_blank" rel="noopener">Sed 命令</a><br><a href="https://www.runoob.com/linux/linux-comm-awk.html" target="_blank" rel="noopener">Awk 命令</a></p><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><ul><li>标准输入：stdin，由 0 表示。</li><li>标准输出：stdout，由 1 表示。</li><li>标准错误：stderr，由 2 表示。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">覆盖文件的原有内容</span><br><span class="line">&gt;&gt;</span><br><span class="line">在文件后追加命令的输出</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls &#x2F; &gt; lsoutput.txt</span><br><span class="line">gcc 2&gt; gccerr</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HW2 Profiling Serial MergeSort</title>
      <link href="/2023/02/15/mit6-172-hw2/"/>
      <url>/2023/02/15/mit6-172-hw2/</url>
      
        <content type="html"><![CDATA[<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><ul><li>作业介绍<ul><li>recitation-测试</li><li>homework-改进代码</li></ul></li><li>提前设置  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &lt;target&gt; DEBUG&#x3D;1</span><br></pre></td></tr></table></figure>  报错 不知道为何</li></ul><h1 id="Recitation-Perf-and-Cachegrind"><a href="#Recitation-Perf-and-Cachegrind" class="headerlink" title="Recitation: Perf and Cachegrind"></a>Recitation: Perf and Cachegrind</h1><h2 id="Perf"><a href="#Perf" class="headerlink" title="Perf"></a>Perf</h2><h3 id="安装Perf"><a href="#安装Perf" class="headerlink" title="安装Perf"></a>安装Perf</h3><p>出现了问题，但是没有记录</p><h3 id="Perf个人使用速查"><a href="#Perf个人使用速查" class="headerlink" title="Perf个人使用速查"></a>Perf个人使用速查</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Performance Engineering Of Software Systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scoop语法速查</title>
      <link href="/2023/01/11/scoop/"/>
      <url>/2023/01/11/scoop/</url>
      
        <content type="html"><![CDATA[<ul><li>搜索</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop search [名称]</span><br></pre></td></tr></table></figure><ul><li><p>添加 bucket</p><ul><li>打开<a href="https://rasa.github.io/scoop-directory/search" target="_blank" rel="noopener">网站</a></li><li>搜索软件并复制 bucket 网址</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add [名称] [bucket 网址]</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install [名称]</span><br></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall [名称]</span><br></pre></td></tr></table></figure><ul><li>打开软件列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop list</span><br></pre></td></tr></table></figure><ul><li>更新全部软件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update \*</span><br></pre></td></tr></table></figure><ul><li><p>Question1</p><p>Checking repo… ‘<a href="https://github.com/ScoopInstaller/Main" target="_blank" rel="noopener">https://github.com/ScoopInstaller/Main</a>‘ doesn’t look like a valid git repository</p></li><li><p>Answer1</p><p>A quick fix to try for now. If you find where scoop has installed<br>to (On my machine C:\Users\Greg\scoop\apps\scoop\current) and go into the<br>lib directory you should find a git.ps1 file.<br>Change the line in the function git_proxy_cmd (currently line 7)<br>from<br>&amp; “$env:COMSPEC” /c $cmd<br>to this<br>  &amp; “$env:COMSPEC” /d /c $cmd<br>Note the /d switch. Save it and see if this solves the problem for you.</p><p>This switch just invokes the git command without an extra autostart<br>features. My guess is that you might have something also starting that is<br>causing an error.<br>Another good way to know if this might work is if you just start a command<br>window by itself do you also get a message at the top of the window.</p><p>In any case, this switch can’t hurt, if you think it causes other problems<br>you can always take it out. Good luck - I would be curious to know if this<br>fixes things for you. It did for me.<br>… Greg …</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Scoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lecture-3-Bit-Hacks</title>
      <link href="/2023/01/08/mit6172-3/"/>
      <url>/2023/01/08/mit6172-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Bit-Hacks"><a href="#Bit-Hacks" class="headerlink" title="Bit Hacks"></a>Bit Hacks</h1><h3 id="二进制表示"><a href="#二进制表示" class="headerlink" title="二进制表示"></a>二进制表示</h3><h3 id="反补码性质"><a href="#反补码性质" class="headerlink" title="反补码性质"></a>反补码性质</h3><h3 id="八进制、十六进制"><a href="#八进制、十六进制" class="headerlink" title="八进制、十六进制"></a>八进制、十六进制</h3><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><h3 id="Set-the-kth-Bit"><a href="#Set-the-kth-Bit" class="headerlink" title="Set the kth Bit"></a>Set the k<sup>th</sup> Bit</h3><pre><code>y = x | (1 &lt;&lt; k);</code></pre><h3 id="Clear-the-kth-Bit"><a href="#Clear-the-kth-Bit" class="headerlink" title="Clear the kth Bit"></a>Clear the k<sup>th</sup> Bit</h3><pre><code>y = x &amp;(1 &lt;&lt; k);</code></pre><h3 id="Toggle-the-kth-Bit"><a href="#Toggle-the-kth-Bit" class="headerlink" title="Toggle the kth Bit"></a>Toggle the k<sup>th</sup> Bit</h3><pre><code>y = x ^ (1 &lt;&lt; k);</code></pre><h3 id="Extract-a-Bit-Field"><a href="#Extract-a-Bit-Field" class="headerlink" title="Extract a Bit Field"></a>Extract a Bit Field</h3><pre><code>(x % mask) &gt;&gt; shift;//mask 将待抽取的位 置一</code></pre><p><img src="extract1.png" alt="2023-01-05-mit6172-3"></p><h3 id="Set-a-Bit-Field"><a href="#Set-a-Bit-Field" class="headerlink" title="Set a Bit Field"></a>Set a Bit Field</h3><pre><code>x = (x &amp; ~mask) | (y &lt;&lt; shift);//For safety’s sake:((y &lt;&lt; shift) &amp; mask)</code></pre><p><img src="set1.png" alt="2023-01-05-mit6172-3"></p><h3 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h3><ul><li><h4 id="Ordinary-Swap"><a href="#Ordinary-Swap" class="headerlink" title="Ordinary Swap"></a>Ordinary Swap</h4><pre><code>  t = x;  x = y;  y = t;</code></pre></li><li><h4 id="No-Temp-Swap"><a href="#No-Temp-Swap" class="headerlink" title="No-Temp Swap"></a>No-Temp Swap</h4><pre><code>  x = x ^ y;  y = x ^ y;  x = x ^ y;</code></pre><p><img src="swap1.png" alt="2023-01-05-mit6172-3"></p><p><strong>Why it works</strong> : XOR is its own inverse (x ^ y) ^ y = x</p><p><strong>Performance</strong> : poor at exploiting instruction-level parallelism(slower than the original code)</p></li></ul><h3 id="Minimum-of-Two-Integers"><a href="#Minimum-of-Two-Integers" class="headerlink" title="Minimum of Two Integers"></a>Minimum of Two Integers</h3><ul><li><h4 id="Ordinary-Minimum"><a href="#Ordinary-Minimum" class="headerlink" title="Ordinary Minimum"></a>Ordinary Minimum</h4><pre><code>  r = (x &lt; y) ? x : y;</code></pre><p><strong>Performance</strong> : A mispredicted branch empties the processor pipeline<br><strong>Caveat</strong> : The compiler is usually smart enough to optimize away the unpredictable branch, but maybe not.</p></li><li><h4 id="No-Branch-Minimum"><a href="#No-Branch-Minimum" class="headerlink" title="No-Branch Minimum"></a>No-Branch Minimum</h4><pre><code>  r = y ^ ((x ^ y) &amp; -(x &lt; y));</code></pre><p><img src="min1.png" alt="2023-01-05-mit6172-3"></p></li></ul><h3 id="Merging-Two-Sorted-Arrays"><a href="#Merging-Two-Sorted-Arrays" class="headerlink" title="Merging Two Sorted Arrays"></a>Merging Two Sorted Arrays</h3><p><img src="merge1.png" alt="2023-01-05-mit6172-3"></p><p><strong>if branch is predictable</strong>: most of the time it retrun true, and once it return false you are never going to look at that again.<br>it is predictable = it can do prefetching efficiently</p><h4 id="Modular-Additon"><a href="#Modular-Additon" class="headerlink" title="Modular Additon"></a>Modular Additon</h4><p><img src="Lecture-3-Bit-Hacks_30.png" alt="2023-01-05-mit6172-3"></p><ul><li>n 是 2 的幂</li><li>z 可能小于 n</li><li>同 minimum 方法</li></ul><h4 id="Round-up-to-a-Power-of-2"><a href="#Round-up-to-a-Power-of-2" class="headerlink" title="Round up to a Power of 2"></a>Round up to a Power of 2</h4><p>进一至 2 的幂次<br><img src="Lecture-3-Bit-Hacks_31.png" alt="2023-01-05-mit6172-3"></p><p><img src="Lecture-3-Bit-Hacks_41.png" alt="2023-01-05-mit6172-3"></p><ul><li>注意向右填充所有位的方法</li></ul><ul><li>这是一种处理边界条件的方法</li></ul><h4 id="Least-Significant-1"><a href="#Least-Significant-1" class="headerlink" title="Least-Significant 1"></a>Least-Significant 1</h4><p>最小的 1<br><img src="Lecture-3-Bit-Hacks_43.png" alt="2023-01-05-mit6172-3"></p><h4 id="Log-Base-2-of-a-Power-of-2"><a href="#Log-Base-2-of-a-Power-of-2" class="headerlink" title="Log Base 2 of a Power of 2"></a>Log Base 2 of a Power of 2</h4><p>课堂表演魔术-利用德布鲁因序列的数学性质</p><p><img src="Lecture-3-Bit-Hacks_44.png" alt="2023-01-05-mit6172-3"></p><p><img src="Lecture-3-Bit-Hacks_46.png" alt="2023-01-05-mit6172-3"></p><ul><li>德布鲁因序列</li></ul><h4 id="n-Queens-Problem"><a href="#n-Queens-Problem" class="headerlink" title="n Queens Problem"></a>n Queens Problem</h4><p><img src="Lecture-3-Bit-Hacks_47.png" alt="2023-01-05-mit6172-3"></p><ul><li>每一行从左往右试 符合就下一行。若都不符合就上一行继续往后试</li></ul><p><img src="Lecture-3-Bit-Hacks_58.png" alt="2023-01-05-mit6172-3"></p><ul><li>三个向量 分别对应下文三图</li></ul><p><img src="Lecture-3-Bit-Hacks_59.png" alt="2023-01-05-mit6172-3"></p><p><img src="Lecture-3-Bit-Hacks_60.png" alt="2023-01-05-mit6172-3"></p><p><img src="Lecture-3-Bit-Hacks_61.png" alt="2023-01-05-mit6172-3"></p><h4 id="Population-Count"><a href="#Population-Count" class="headerlink" title="Population Count"></a>Population Count</h4><p><img src="Lecture-3-Bit-Hacks_62.png" alt="2023-01-05-mit6172-3"></p><ul><li>留意清除最低位的 1 的使用</li><li>数字小的时候才好用</li></ul><p><img src="Lecture-3-Bit-Hacks_63.png" alt="2023-01-05-mit6172-3"></p><ul><li>内存操作的成本是性能的主要瓶颈</li></ul><p><img src="Lecture-3-Bit-Hacks_64.png" alt="2023-01-05-mit6172-3"></p><ul><li>这里加法是真加法 不是或</li></ul><p><img src="Lecture-3-Bit-Hacks_65.png" alt="2023-01-05-mit6172-3"></p><p><img src="Lecture-3-Bit-Hacks_66.png" alt="2023-01-05-mit6172-3"></p><p><img src="Lecture-3-Bit-Hacks_67.png" alt="2023-01-05-mit6172-3"></p><ul><li>popcount 指令比自己编码快很多</li></ul><h1 id="英语词汇笔记"><a href="#英语词汇笔记" class="headerlink" title="英语词汇笔记"></a>英语词汇笔记</h1><div class="table-container"><table><thead><tr><th>单词</th><th>解释</th></tr></thead><tbody><tr><td>binary</td><td>二进制</td></tr><tr><td>prefix</td><td>前置</td></tr><tr><td>toggle</td><td>切换</td></tr><tr><td>prefetching</td><td>预取</td></tr><tr><td>Modular</td><td>模</td></tr><tr><td>boundary case</td><td>边界条件</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> Performance Engineering Of Software Systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lecture 2 Bentley Rules for Optimizing Work</title>
      <link href="/2023/01/07/mit6172-2/"/>
      <url>/2023/01/07/mit6172-2/</url>
      
        <content type="html"><![CDATA[<h1 id="DATA-STRUCTURES"><a href="#DATA-STRUCTURES" class="headerlink" title="DATA STRUCTURES"></a>DATA STRUCTURES</h1><h3 id="Packing-and-Encoding"><a href="#Packing-and-Encoding" class="headerlink" title="Packing and Encoding"></a>Packing and Encoding</h3><p><strong>The idea of packing is to store more than one data value in a machine word. The related idea of encoding is to convert data values into a representation requiring fewer bits.</strong></p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>Encoding dates</p><ul><li>The string “September 11, 2018” can be stored in 18 bytes — more than two double (64-bit) words which must moved whenever a date is manipulated.</li></ul><h4 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h4><ul><li>Assuming that we only store years between 4096 B.C.E. and 4096 C.E., there are about 365.25 × 8192 ≈ 3 M dates, which can be encoded in ⎡lg(3×106)⎤ = 22 bits, easily fitting in a single (32-bit) word.</li></ul><p>But determining the month of a date takes more work than with the string representation.</p><ul><li><p>Instead，pack the three fields into a word</p><p>typedef struct{<br>int year: 13;<br>int month: 4;<br>int day: 5;<br>} date_t;</p></li><li><p>This packed representation still only takes 22 bits(Actually this will pack the struct a little bit at the end), but the individual fields can be extracted much more quickly than if we had encoded the 3 M dates as sequential integers</p></li></ul><p><strong>Sometimes unpacking and decoding are the optimization, depending on whether more work is involved moving the data or operating on it.</strong></p><h3 id="Augmentation"><a href="#Augmentation" class="headerlink" title="Augmentation"></a>Augmentation</h3><p><strong>The idea of data-structure augmentation is to add information to a data structure to make common operations do less work.</strong></p><ul><li>Appending singly linked lists</li></ul><h3 id="Precomputation"><a href="#Precomputation" class="headerlink" title="Precomputation"></a>Precomputation</h3><p><strong>The idea of precomputation is to perform calculations in advance so as to avoid doing them at “missioncritical” times.</strong></p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><p>Binomial coefficients<br>【Latex 公式！！！！！！！！！】</p><ul><li>Computing the “choose” function by implementing this formula can be expensive (lots of multiplications)</li><li>Watch out for <strong>integer overflow</strong> for even modest values of n and k.</li></ul><h4 id="Idea-1"><a href="#Idea-1" class="headerlink" title="Idea"></a>Idea</h4><p>Precompute the table of coefficients when initializing, and perform table look-up at runtime.</p><ul><li>Pascal’s Triangle<ul><li>vertical axis - n</li><li>horizontal axis - k</li></ul></li></ul><p><img src="table1.png" alt="2023-01-05-mit6172-2"></p><p><img src="table2.png" alt="2023-01-05-mit6172-2"></p><h3 id="Compile-Time-Initialization"><a href="#Compile-Time-Initialization" class="headerlink" title="Compile-Time Initialization"></a>Compile-Time Initialization</h3><p><strong>The idea of compile-time initialization is to store the values of constants during compilation, saving work at execution time.</strong></p><p><img src="table3.png" alt="2023-01-05-mit6172-2"></p><h4 id="Idea-2"><a href="#Idea-2" class="headerlink" title="Idea"></a>Idea</h4><p>Create large static tables by metaprogramming.（easier in Python）</p><h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><p><strong>The idea of caching is to store results that have been accessed recently so that the program need not compute them again.</strong></p><p><img src="cache.png" alt="2023-01-05-mit6172-2"></p><ul><li>可以做大一点的 cache，这样搜索 cache 耗时会增加，但也可以节省运行时间</li><li>可以在软件上实现而不依靠硬件的 cache 来做</li></ul><h3 id="Sparsity"><a href="#Sparsity" class="headerlink" title="Sparsity"></a>Sparsity</h3><p><strong>The idea of exploiting sparsity is to avoid storing and computing on zeroes. “Thefastestwaytocomputeis nottocomputeatall.”</strong></p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h4><p>Matrix-vector multiplication</p><p><img src="matrix1.png" alt="2023-01-05-mit6172-2"></p><h4 id="Idea-3"><a href="#Idea-3" class="headerlink" title="Idea"></a>Idea</h4><p>Compressed Sparse Row (稀疏矩阵的主要存储格式之一)<br><img src="matrix2.png" alt="2023-01-05-mit6172-2"></p><p><img src="matrix3.png" alt="2023-01-05-mit6172-2"></p><p><img src="matrix4.png" alt="2023-01-05-mit6172-2"></p><p><img src="matrix5.png" alt="2023-01-05-mit6172-2"></p><h1 id="LOGIC"><a href="#LOGIC" class="headerlink" title="LOGIC"></a>LOGIC</h1><h3 id="Constant-Folding-and-Propagation"><a href="#Constant-Folding-and-Propagation" class="headerlink" title="Constant Folding and Propagation"></a>Constant Folding and Propagation</h3><p><strong>The idea of constant folding and propagation is to evaluate constant expressions and substitute the result into further expressions, all during compilation.</strong></p><p><img src="CFaP1.png" alt="2023-01-05-mit6172-2"></p><p><strong>With a sufficiently high optimization level, all the expressions are evaluated at compile-time.</strong></p><h3 id="Common-Subexpression-Elimination"><a href="#Common-Subexpression-Elimination" class="headerlink" title="Common-Subexpression Elimination"></a>Common-Subexpression Elimination</h3><p><strong>The idea of common-subexpression elimination is to avoid computing the same expression multiple times by evaluating the expression once and storing the result for later use.</strong></p><p><img src="CSE.png" alt="2023-01-05-mit6172-2"></p><h3 id="Algebraic-Identities"><a href="#Algebraic-Identities" class="headerlink" title="Algebraic Identities"></a>Algebraic Identities</h3><p><strong>The idea of exploiting algebraic identities is to replace expensive algebraic expressions with algebraic equivalents that require less work.</strong></p><h3 id="Short-Circuiting"><a href="#Short-Circuiting" class="headerlink" title="Short-Circuiting"></a>Short-Circuiting</h3><p><strong>When performing a series of tests, the idea of shortcircuiting is to stop evaluating as soon as you know the answer.</strong></p><p>&amp;&amp; ||</p><h3 id="Ordering-Tests"><a href="#Ordering-Tests" class="headerlink" title="Ordering Tests"></a>Ordering Tests</h3><p><strong>Consider code that executes a sequence of logical tests. The idea of ordering tests is to perform those that are more often “successful” — a particular alternative is selected by the test — before tests that are rarely successful. Similarly, inexpensive tests should precede expensive ones.</strong></p><h3 id="Creating-a-Fast-Path"><a href="#Creating-a-Fast-Path" class="headerlink" title="Creating a Fast Path"></a>Creating a Fast Path</h3><h3 id="Combining-Tests"><a href="#Combining-Tests" class="headerlink" title="Combining Tests"></a>Combining Tests</h3><p><strong>The idea of combining tests is to replace a sequence of tests with one test or switch.</strong></p><p>Switch</p><h1 id="LOOPS"><a href="#LOOPS" class="headerlink" title="LOOPS"></a>LOOPS</h1><h3 id="Hoisting-循环不变代码外移"><a href="#Hoisting-循环不变代码外移" class="headerlink" title="Hoisting 循环不变代码外移"></a>Hoisting 循环不变代码外移</h3><p><strong>The goal of hoisting — also called loop-invariant code motion — is to avoid recomputing loop-invariant code each time through the body of a loop.</strong></p><h3 id="Sentinels-简化循环边界条件"><a href="#Sentinels-简化循环边界条件" class="headerlink" title="Sentinels 简化循环边界条件"></a>Sentinels 简化循环边界条件</h3><p><strong>Sentinels are special dummy values placed in a data structure to simplify the logic of boundary conditions, and in particular, the handling of loop-exit tests.</strong></p><h3 id="Loop-Unrolling-循环展开"><a href="#Loop-Unrolling-循环展开" class="headerlink" title="Loop Unrolling 循环展开"></a>Loop Unrolling 循环展开</h3><p><strong>Loop unrolling attempts to save work by combining several consecutive iterations of a loop into a single iteration, thereby reducing the total number of iterations of the loop and, consequently, the number of times that the instructions that control the loop must be executed.</strong></p><ul><li>Full loop unrolling: All iterations are unrolled.</li><li>Partial loop unrolling: Several, but not all, of the iterations are unrolled.</li></ul><h3 id="Loop-Fusion-循环合并"><a href="#Loop-Fusion-循环合并" class="headerlink" title="Loop Fusion 循环合并"></a>Loop Fusion 循环合并</h3><p><strong>The idea of loop fusion — also called jamming — is to combine multiple loops over the same index range into a single loop body, thereby saving the overhead of loop control.</strong></p><h3 id="Eliminating-Wasted-Iterations-消除浪费的迭代"><a href="#Eliminating-Wasted-Iterations-消除浪费的迭代" class="headerlink" title="Eliminating Wasted Iterations 消除浪费的迭代"></a>Eliminating Wasted Iterations 消除浪费的迭代</h3><p><strong>The idea of eliminating wasted iterations is to modify loop bounds to avoid executing loop iterations over essentially empty loop bodies.</strong></p><h1 id="FUNCTIONS"><a href="#FUNCTIONS" class="headerlink" title="FUNCTIONS"></a>FUNCTIONS</h1><h3 id="Inlining"><a href="#Inlining" class="headerlink" title="Inlining"></a>Inlining</h3><p><strong>The idea of inlining is to avoid the overhead of a function call by replacing a call to the function with the body of the function itself.</strong></p><ul><li>直接写入函数</li><li>static inline 内联函数</li></ul><h3 id="Tail-Recursion-Elimination-尾调用优化"><a href="#Tail-Recursion-Elimination-尾调用优化" class="headerlink" title="Tail-Recursion Elimination 尾调用优化"></a>Tail-Recursion Elimination 尾调用优化</h3><p><strong>The idea of tail-recursion elimination is to replace a recursive call that occurs as the last step of a function with a branch, saving function-call overhead.</strong></p><h3 id="Coarsening-Recursion-粗化递归"><a href="#Coarsening-Recursion-粗化递归" class="headerlink" title="Coarsening Recursion 粗化递归"></a>Coarsening Recursion 粗化递归</h3><p><strong>The idea of coarsening recursion is to increase the size of the base case and handle it with more efficient code that avoids function-call overhead.</strong></p><h4 id="Chapgpt-对粗化递归的一个例子"><a href="#Chapgpt-对粗化递归的一个例子" class="headerlink" title="Chapgpt 对粗化递归的一个例子"></a>Chapgpt 对粗化递归的一个例子</h4><p>粗化递归是一种优化技术，它通过减少递归调用的次数来提高运行速度。这通常是通过在每次递归调用之间执行更多的工作来实现的。</p><p>例如，考虑一个用于计算阶乘的简单递归函数：<br>def factorial(n):<br>if n == 1:<br>return 1<br>else:<br>return n * factorial(n - 1)</p><p>这个函数每次递归调用都会执行一次乘法运算。我们可以对它进行粗化递归优化，使其在每次递归调用之间执行多次乘法运算，从而减少递归调用的次数：</p><pre><code>def factorial(n):result = 1while n &gt; 1:    result *= n    n -= 1return result</code></pre><p>这个优化后的函数只会执行一次递归调用，因此它的运行速度会快得多。</p><p>当然，粗化递归并不是每个情况下都能使用的，它只适用于一些特定的问题。但是，当适用时，它可以显著提高运行速度。</p><h1 id="Closing-Advice"><a href="#Closing-Advice" class="headerlink" title="Closing Advice"></a>Closing Advice</h1><ul><li>Avoid premature optimization. First get correct working code. Then optimize, preserving correctness by regression testing.</li><li>Reducing the work of a program does not necessarily decrease its running time, but it is a good heuristic.</li><li>The compiler automates many low-level optimizations.</li><li>To tell if the compiler is actually performing a particular optimization, look at the assembly code.</li></ul><h1 id="英语词汇笔记"><a href="#英语词汇笔记" class="headerlink" title="英语词汇笔记"></a>英语词汇笔记</h1><div class="table-container"><table><thead><tr><th>单词</th><th>解释</th></tr></thead><tbody><tr><td>excuse</td><td>执行（代码）</td></tr><tr><td>Algorithm</td><td>算法</td></tr><tr><td>DATA STRUCTURES</td><td>数据结构</td></tr><tr><td>encode</td><td>编码</td></tr><tr><td>manipulate</td><td>操作</td></tr><tr><td>Augmentation</td><td>增强</td></tr><tr><td>Precomputation</td><td>预计算</td></tr><tr><td>Binomial coefficients</td><td>二项分布 系数</td></tr><tr><td>implemente</td><td>执行（公式）</td></tr><tr><td>formula</td><td>公式</td></tr><tr><td>perform</td><td>执行（操作）</td></tr><tr><td>compile</td><td>编译</td></tr><tr><td>metaprogramming</td><td>元编程</td></tr><tr><td>Sparsity</td><td>稀疏的</td></tr><tr><td>Constant Folding</td><td>常数折叠（编译器优化的一种技术）</td></tr><tr><td>Constant Propagation</td><td>常数传播（编译器优化的一种技术）</td></tr><tr><td>optimization</td><td>最优化</td></tr><tr><td>common-subexpression</td><td>公因子表达式</td></tr><tr><td>elimination</td><td>剔除</td></tr><tr><td>Algebraic Identities</td><td>代数恒等式</td></tr><tr><td>iteration</td><td>迭代</td></tr><tr><td>Recursion</td><td>递归</td></tr><tr><td>heuristic</td><td>（计算机程序或教育中的）启发式方法</td></tr><tr><td>assembly code</td><td>汇编代码</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> Performance Engineering Of Software Systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lecture 1 Introduction and Matrix Multiplication</title>
      <link href="/2023/01/05/mit6172-1/"/>
      <url>/2023/01/05/mit6172-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>略</p><h1 id="Matrix-Multiplication"><a href="#Matrix-Multiplication" class="headerlink" title="Matrix Multiplication"></a>Matrix Multiplication</h1><p>利用矩阵乘法介绍优化方案</p><p><img src="MatrixMultiplication.png" alt="2023-01-05-mit6172-1"></p><h3 id="采用-Python、Java、C-的运行时间不一样"><a href="#采用-Python、Java、C-的运行时间不一样" class="headerlink" title="采用 Python、Java、C 的运行时间不一样"></a>采用 Python、Java、C 的运行时间不一样</h3><p>Why is Python so slow and C so fast?</p><ul><li>Python is interpreted.</li><li>C is compiled directly to machine code.</li><li>Java is compiled to byte-code, which is then interpreted and just-in-time (JIT) compiled to machine code.</li></ul><h3 id="i、j、k-循环调换位置后运行时间不一样"><a href="#i、j、k-循环调换位置后运行时间不一样" class="headerlink" title="i、j、k 循环调换位置后运行时间不一样"></a>i、j、k 循环调换位置后运行时间不一样</h3><ul><li>cache hits 和 cache misses</li></ul><p><img src="ijk1.png" alt="2023-01-05-mit6172-1"></p><p><img src="ijk2.png" alt="2023-01-05-mit6172-1"></p><p><img src="ijk3.png" alt="2023-01-05-mit6172-1"></p><p><img src="ijk4.png" alt="2023-01-05-mit6172-1"></p><p><img src="ijk5.png" alt="2023-01-05-mit6172-1"></p><h3 id="Clang-优化"><a href="#Clang-优化" class="headerlink" title="Clang 优化"></a>Clang 优化</h3><p>不一定 O3 优化比 O2 优化快，有时候 O2 快，有时候 O3 快</p><h3 id="Parallel-Loops"><a href="#Parallel-Loops" class="headerlink" title="Parallel Loops"></a>Parallel Loops</h3><p>The <strong>cilk_for</strong> loop allows all iterations of the loop to execute in parallel.</p><p>Rule of Thumb Parallelize outer loops rather than inner loops.</p><h3 id="进一步优化-重用数据（tiling）"><a href="#进一步优化-重用数据（tiling）" class="headerlink" title="进一步优化-重用数据（tiling）"></a>进一步优化-重用数据（tiling）</h3><ul><li>Restructure the computation to reuse data in the cache as much as possible. （Cache misses are slow, and cache hits are fast.）</li><li>Try to make the most of the cache by reusing the data that’s already there.</li></ul><h3 id="Parallel-divide-and-conquer"><a href="#Parallel-divide-and-conquer" class="headerlink" title="Parallel divide-and-conquer"></a>Parallel divide-and-conquer</h3><pre><code>cilk_spawn/*The child function call is spawned, meaning it may execute in parallel with the parent caller.*/cilk_sync/*Control may not pass this point until all spawned children have returned.*/</code></pre><h3 id="Compiler-Vectorization（编译矢量化）"><a href="#Compiler-Vectorization（编译矢量化）" class="headerlink" title="Compiler Vectorization（编译矢量化）"></a>Compiler Vectorization（编译矢量化）</h3><p>Many machines don’t support the newest set of vector instructions, however, so the compiler uses vector instructions conservatively by default</p><h3 id="更多方法"><a href="#更多方法" class="headerlink" title="更多方法"></a>更多方法</h3><ul><li>Preprocessing</li><li>Matrix transposition</li><li>Data alignment</li><li>Memory-management optimizations</li><li>A clever algorithm for the base case that uses AVX intrinsic instructions explicitly</li></ul><p>综上优化效果<br><img src="time.png" alt="2023-01-05-mit6172-1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Performance Engineering Of Software Systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建snail主题的github博客踩坑历程回顾及建议</title>
      <link href="/2022/11/10/blogToBuildBlog/"/>
      <url>/2022/11/10/blogToBuildBlog/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭建本博客时主要参考了 6 系师兄的<a href="https://saltyfishyjk.github.io/2022/01/28/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%9B%9E%E9%A1%BE%E6%A6%82%E8%A7%88/" target="_blank" rel="noopener"><strong>搭建教程指路</strong></a><br>本文主要是对师兄的教程作出了一些个人补充<br>（笔者当时理解不透弄错而走了很久的弯路，想要补充分享更傻瓜式的搭建过程）<br>同时，笔者能力有限，本文还有许多不足，希望大家看到后能够指导一下笔者。</p><pre><code>注: 本文不涉及hexo、npm、git等基础知识的介绍，谷歌或百度自主搜索关键词即可得到相关信息    通过本文    你能得到一些上述博客未曾提到的细节问题和一个博客搭建历程建议    但无法实现博客更多细节的美化和获得相关知识的科普    假如搭建过程遇到了其他难题，推荐学会利用谷歌搜索</code></pre><h1 id="博客搭建顺序建议"><a href="#博客搭建顺序建议" class="headerlink" title="博客搭建顺序建议"></a>博客搭建顺序建议</h1><h2 id="对于尝试建立过-github-博客且已建立-github-io-库的读者"><a href="#对于尝试建立过-github-博客且已建立-github-io-库的读者" class="headerlink" title="对于尝试建立过 github 博客且已建立 github.io 库的读者"></a>对于尝试建立过 github 博客且已建立 github.io 库的读者</h2><ul><li>在<strong>对应的 github.io 库</strong>中的<strong>settings</strong>中将<strong>branches 名称</strong>从 main 修改成 master</li><li>阅读通用建议</li></ul><h2 id="对于未建立过-github-库，没有尝试过建立博客的读者"><a href="#对于未建立过-github-库，没有尝试过建立博客的读者" class="headerlink" title="对于未建立过 github 库，没有尝试过建立博客的读者"></a>对于未建立过 github 库，没有尝试过建立博客的读者</h2><ul><li>阅读<a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="noopener"><strong>hexo+Github Pages 搭建教程</strong></a>并完成所有步骤<br>注：该教程中的 hexo init myBlog 和 cd myBlog 操作笔者是用 hexo init blog 和 cd blog 实现的。（只是改了个名字）</li><li>阅读通用建议</li></ul><h2 id="通用建议"><a href="#通用建议" class="headerlink" title="通用建议"></a>通用建议</h2><p>假如你不想遇到奇奇怪怪的 error 提醒，小白最好先不要进行其他配置文件的修改。。</p><h4 id="1、按照snail-主题官方仓库的-README-教程进行到到-Configuration"><a href="#1、按照snail-主题官方仓库的-README-教程进行到到-Configuration" class="headerlink" title="1、按照snail 主题官方仓库的 README 教程进行到到 Configuration"></a>1、按照<a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">snail 主题官方仓库</a>的 README 教程进行到到 Configuration</h4><pre><code>教程前面提到的的建立hexo init blog和cd blog大家已经实现了！只需要在blog文件夹中右键 git bash here就可以了</code></pre><h4 id="2、跳到修改本地-config-中-Deployment-的配置信息"><a href="#2、跳到修改本地-config-中-Deployment-的配置信息" class="headerlink" title="2、跳到修改本地_config 中 Deployment 的配置信息"></a>2、跳到修改本地_config 中 Deployment 的配置信息</h4><p>原配置信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">    <span class="string">coding:coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>配置后信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:xxx/xxx.github.io.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">https://e.coding.net/xxxxx</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>请注意</p><ul><li>这里 coding 是指腾讯的<a href="https://coding.net/" target="_blank" rel="noopener">CODING DevOps</a><br>需要读者在免费注册使用后在项目中创建 DevOps 项目并进行选择克隆 https 复制地址信息</li><li><p>我的 github 库地址是利用 ssh 克隆的代码库仓库（电脑之前配置了 github 的 ssh）<br>但我的 coding 库地址是利用 https 克隆的代码库仓库<br>（按照上述步骤搭建的你理应也是这样）</p><pre><code>    这里涉及到电脑设置多个ssh key的问题    若读者感兴趣可以谷歌搜索自行了解    笔者为了减少工作量并没有做这一步    这学期也不再需要换多个ssh了，下学期可能会进行研究并写分享博客    假如你使用https克隆，那么在hexo d一步中将需要输入账号密码。    假如利用ssh密钥克隆，那么要提前在库中实现ssh key绑定</code></pre></li></ul><h4 id="3、在-blog-中-git-bash-here-再利用指令完成博客的搭建与上传"><a href="#3、在-blog-中-git-bash-here-再利用指令完成博客的搭建与上传" class="headerlink" title="3、在 blog 中 git bash here 再利用指令完成博客的搭建与上传"></a>3、在 blog 中 git bash here 再利用指令完成博客的搭建与上传</h4><p>主要利用以下三条指令（上附教程中有讲到是干什么的）</p><pre><code>hexo ghexo shexo d</code></pre><p>至于下面这种上传方式，我一般在不打算浏览本地网站的时候用</p><pre><code>hexo cleanhexo g -d</code></pre><p>注意：这里有的同学会出现这种情况</p><p><img src="error1.png" alt="2022-11-10-blogToBuildBlog"></p><p>这里大家要注意这种情况我们看的不是 Error：Spawn Failed 这一行，而是往上看可以看到一行 remote：Repository not found<br>这里说了我们找不到这个仓库，这种问题的出现，很大可能是因为有的同学的 ssh 在部分课程修改后没有改回来。重新设置一遍 github 的 ssh 就能解决这个问题！</p><h4 id="阅读到这里，你就可以在自己的-Github-Pages-相关网址中看到属于自己的博客网站啦！"><a href="#阅读到这里，你就可以在自己的-Github-Pages-相关网址中看到属于自己的博客网站啦！" class="headerlink" title="阅读到这里，你就可以在自己的 Github Pages 相关网址中看到属于自己的博客网站啦！"></a>阅读到这里，你就可以在自己的 Github Pages 相关网址中看到属于自己的博客网站啦！</h4><p>辣么，快去试试看吧！</p><h1 id="笔者在博客美化中做出的修改建议"><a href="#笔者在博客美化中做出的修改建议" class="headerlink" title="笔者在博客美化中做出的修改建议"></a>笔者在博客美化中做出的修改建议</h1><h2 id="修改前的建议"><a href="#修改前的建议" class="headerlink" title="修改前的建议"></a>修改前的建议</h2><ul><li><p>备份 blog 文件夹</p><p>可以选择 git 或者本地备份<br>反正一定要备份！！！（一个下午和一个晚上血和泪的教训）</p></li></ul><h2 id="笔者做出的相关修改"><a href="#笔者做出的相关修改" class="headerlink" title="笔者做出的相关修改"></a>笔者做出的相关修改</h2><p>这里仅涉及官方仓库教程中没提到或者不容易找到的<br>且笔者修改过的</p><h4 id="blog-config-yml"><a href="#blog-config-yml" class="headerlink" title="blog_config.yml"></a>blog_config.yml</h4><ul><li>大部分内容<br>根据官方仓库教程修改就可以，官方仓库没提到的大部分都是其他配置信息，需要读者额外了解<br>笔者主要将不需要的内容注释掉或修改成 enable: false<br>这里每个人审美不同，可以自由发挥<br>通过单词词义理解一下或者尝试一下不会遇到太大问题，出现问题恢复原来的就行了</li><li>URL<br>请不要修改！！！<br>hexo 官方教程中是要修改这里的。。但是小白别碰就行了。<br>笔者目前也没有弄懂原理。但是不修改就不会出现问题，修改后会报错。这里卡了笔者很久</li><li>comment（评论系统）<br>按<a href="https://www.cnblogs.com/Johnson-lin/p/11386877.html" target="_blank" rel="noopener">该教程</a>走就好了<br>但是我报错咧 不清楚。</li></ul><h4 id="blog-source"><a href="#blog-source" class="headerlink" title="blog\source"></a>blog\source</h4><pre><code>这里可以修改导航页（也就是右上角），点进去文件夹修改index就会知道怎么修改了。不需要的就选择删除。</code></pre><h4 id="blog-themes-snail-layout-partial-footer-ejs"><a href="#blog-themes-snail-layout-partial-footer-ejs" class="headerlink" title="blog\themes\snail\layout_partial\footer.ejs"></a>blog\themes\snail\layout_partial\footer.ejs</h4><pre><code>在这里可以将页面低端的powered by内容和star的链接改成自己的github账号信息但笔者由于喜欢更简洁的页面，关掉了底部的转发功能。该文件中其他信息笔者并没有修改。若有需要，请读者自行修改地址、名称等信息。</code></pre><p>修改片段前</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"copyright text-muted"</span>&gt;</span></span><br><span class="line">  Copyright <span class="symbol">&amp;copy;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.author</span> %&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">new</span> <span class="attr">Date</span>()<span class="attr">.getFullYear</span>() %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  Powered by</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/dusign/hexo-theme-snail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>hexo-theme-snail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  |</span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"star"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"margin-left: 2px; margin-bottom:-5px;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scrolling</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"100px"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"20px"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"https://ghbtns.com/github-btn.html?user=dusign&amp;repo=hexo-theme-snail&amp;type=star&amp;count=true"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改片段后（读者只需自行比对便可理解）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"copyright text-muted"</span>&gt;</span></span><br><span class="line">  Copyright <span class="symbol">&amp;copy;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.author</span> %&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">new</span> <span class="attr">Date</span>()<span class="attr">.getFullYear</span>() %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  Powered by</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/==ChenJulian==/ChenJulian.github.io.git"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>ChenJulian<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  |</span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"star"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"margin-left: 2px; margin-bottom:-5px;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scrolling</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"100px"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"20px"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"https://ghbtns.com/github-btn.html?user=ChenJulian&amp;repo=ChenJulian.github.io&amp;type=star&amp;count=true"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="04-结语"><a href="#04-结语" class="headerlink" title="04 结语"></a>04 结语</h1><ul><li>由于笔者知识量有限，上文必定有不够完善的地方，希望大家理解。假如有所错漏，希望大家联系我修改，以免误导他人。</li><li><p>且笔者正在被流水线 CPU CPU（CPU 完了，来补充博客了！！）<br>目前得先安排时间去完成流水线 CPU 的代码编写和调试，博客内容的更多修改和搜寻上文笔者不懂的知识点等计划都得搁浅了。</p><blockquote><p>包括但不限于：</p><ul><li>博客评论区的完善和探索(√) <a href="https://blog.51cto.com/xdr630/2797535" target="_blank" rel="noopener">教程指路</a></li></ul></blockquote><pre><code>gitment报错弄不好，改用livere了。还可以微信登录。注意这里的网址应该是livere.com。他那个me后缀的我打不开。</code></pre><blockquote><ul><li>博客提交百度和谷歌统计(√) <a href="https://cloud.tencent.com/developer/article/1953292" target="_blank" rel="noopener">教程指路</a>、<a href="https://blog.csdn.net/tzhuwb/article/details/125477001" target="_blank" rel="noopener">教程指路 2</a>、<a href="https://weilining.github.io/1.html" target="_blank" rel="noopener">教程指路 3</a></li></ul></blockquote><pre><code>注意这里不能用UA码了，准备停用了，请在谷歌分析中采取手动添加的方法。在head那里添加即可。以及在指路3会发现挺多东西需要改的，不然sitemap生成不对。</code></pre><blockquote><ul><li>博客文章右边目录的错误显示(√)</li></ul></blockquote><pre><code>正确使用###，本文章错的地方没改</code></pre></li></ul><h1 id="05-博客迁移"><a href="#05-博客迁移" class="headerlink" title="05 博客迁移"></a>05 博客迁移</h1><ul><li>笔者将博客从一个 github 账号迁移到另一个 github 账号</li><li>首先是 hexo init</li><li>复制除了 git 这类文件夹之外的文件 修改了_config 文件</li><li><p>更换了 git config 后 hexo d 时出现</p><pre><code>remote: Permission to &lt;name1&gt;/&lt;name1&gt;.github.io.git denied to &lt;name2&gt;.</code></pre><p>在国内搜索不到答案，通过谷歌搜索到<a href="https://stackoverflow.com/questions/47465644/github-remote-permission-denied" target="_blank" rel="noopener">解决方案</a>。<br>笔者是因为更改账号后凭据管理器没有相应修改，按着解决方案修改有关 git 的凭据便可上传成功</p><p>本文章在笔者后续了解后会持续更新内容！</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
